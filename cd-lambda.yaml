In the past year, I have consistently completed all assigned tasks on time, delivering high-quality code while adhering to Barclays' standards and risk policies. Key accomplishments include:

Integrating manifest-based deployments for IAM resources, which required synchronization across various branches and repositories, ultimately automating CI/CD pipelines for infrastructure resources.

Managing and creating a generic Docker template for all ECS applications, significantly reducing maintenance efforts and costs.

Implementing an environment comparison checker utility to identify differences between AWS environments, and a manifest comparison utility for detailed resource reports, reducing manual efforts for developers and testers.

Tagging AWS resources to optimize costs and managing ad-hoc release activities.

Ensuring no breaches in mandatory trainings and timesheets, and maintaining a collaborative team environment without negative or bureaucratic approaches.

Automating tasks and improving job efficiencies, optimizing map tagging processes, and preventing incidents by identifying root causes and taking ownership of issues.

Receiving recognition within the team and at the project level, including a spot award, for delivering high-quality products and services on time.




AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a CodeDeploy Blue-Green Deployment with Lambda

Parameters:
  LambdaFunctionName:
    Type: String
    Description: Name for the Lambda function
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for application artifacts
  S3ObjectKey:
    Type: String
    Description: Object key for the application artifacts in the S3 bucket

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3ObjectKey
      Runtime: nodejs14.x
    DependsOn: LambdaExecutionRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaFunctionName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForLambda
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess



AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a CodeDeploy Blue-Green Deployment with Lambda

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyHelloWorldLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          
          exports.handler = async (event) => {
              console.log('Hello World!');
              
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from Lambda!'),
              };
              return response;
          };
      Runtime: nodejs14.x

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  LambdaFunctionNameOutput:
    Description: Lambda Function Name
    Value: MyHelloWorldLambda


  Application:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: MyCodeDeployApp

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref Application
      DeploymentGroupName: MyDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        - arn:aws:iam::aws:policy/AWSCodeDeploy_ReadOnlyAccess

Outputs:
  LambdaFunctionNameOutput:
    Description: Lambda Function Name
    Value: !Ref LambdaFunctionName
  CodeDeployApplicationNameOutput:
    Description: CodeDeploy Application Name
    Value: !Ref Application
  DeploymentGroupNameOutput:
    Description: CodeDeploy Deployment Group Name
    Value: MyDeploymentGroup
